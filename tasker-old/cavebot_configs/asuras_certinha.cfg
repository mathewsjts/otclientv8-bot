label:checkSupply
function:[[

--check supply

-- config

local itemId = 237

local itemQtyMin = 150

local labelToGoIfNotEnoughSupplies = "gotoNpc"

-- não mexer abaixo

local containers = getContainers()

local itemTotal = 0

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

if (itemTotal <= itemQtyMin) then

  gotoLabel(labelToGoIfNotEnoughSupplies)

end

return true


]]
function:[[

--check supply

-- config

local itemId = 7643

local itemQtyMin = 100

local labelToGoIfNotEnoughSupplies = "gotoNpc"

-- não mexer abaixo

local containers = getContainers()

local itemTotal = 0

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

if (itemTotal <= itemQtyMin) then

  gotoLabel(labelToGoIfNotEnoughSupplies)

end

return true


]]
gotolabel:gotoHunt
label:gotoNpc
goto:32976,32715,7
goto:32976,32716,7
function:[[

--buy supply

-- config

local npcName = "Tarun"

local itemQtyMax = 1000

local itemId = 237

-- não mexer abaixo

local npc = getCreatureByName(npcName)

local itemTotal = 0

if not npc then 

  return false

end

if retries > 10 then

  return false

end

local pos = player:getPosition()

local npcPos = npc:getPosition()

if math.max(math.abs(pos.x - npcPos.x), math.abs(pos.y - npcPos.y)) > 2 then

  autoWalk(npcPos, { precision=1 })

  delay(1000)

  return "retry"

end

if not NPC.isTrading() then

  NPC.say("hi")

  schedule(2000, function() NPC.say("trade") end) 

  delay(4000)

  return "retry"

end

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

delay(5000)

local itemQtyToBuy = itemQtyMax - itemTotal

local transactionLoops = math.ceil(itemQtyToBuy/100)

for i = 1, transactionLoops, 1 do

  if (i < transactionLoops) then

    itemQtyToBuy = itemQtyToBuy - 100

    schedule(((i * 2) * 1000), function() NPC.buy(itemId, 100) end)

  else

    schedule(((i * 2) * 1000), function() NPC.buy(itemId, itemQtyToBuy) end)

  end

end

local transactionDelay = (transactionLoops+2)*2000

delay(transactionDelay)

return true


]]
function:[[

--buy supply

-- config

local npcName = "Tarun"

local itemQtyMax = 150

local itemId = 7643

-- não mexer abaixo

local npc = getCreatureByName(npcName)

local itemTotal = 0

if not npc then 

  return false

end

if retries > 10 then

  return false

end

local pos = player:getPosition()

local npcPos = npc:getPosition()

if math.max(math.abs(pos.x - npcPos.x), math.abs(pos.y - npcPos.y)) > 2 then

  autoWalk(npcPos, { precision=1 })

  delay(1000)

  return "retry"

end

if not NPC.isTrading() then

  NPC.say("hi")

  schedule(2000, function() NPC.say("trade") end) 

  delay(4000)

  return "retry"

end

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

delay(5000)

local itemQtyToBuy = itemQtyMax - itemTotal

local transactionLoops = math.ceil(itemQtyToBuy/100)

for i = 1, transactionLoops, 1 do

  if (i < transactionLoops) then

    itemQtyToBuy = itemQtyToBuy - 100

    schedule(((i * 2) * 1000), function() NPC.buy(itemId, 100) end)

  else

    schedule(((i * 2) * 1000), function() NPC.buy(itemId, itemQtyToBuy) end)

  end

end

local transactionDelay = (transactionLoops+2)*2000

delay(transactionDelay)

return true


]]
label:gotoHunt
goto:32976,32715,7
goto:32973,32709,7
goto:32969,32703,7
goto:32963,32700,7
goto:32957,32696,7
goto:32951,32695,7
goto:32948,32689,7
goto:32948,32689,7
function:[[

--check supply

-- config

local itemId = 237

local itemQtyMin = 150

local labelToGoIfNotEnoughSupplies = "gotoCity"

-- não mexer abaixo

local containers = getContainers()

local itemTotal = 0

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

if (itemTotal <= itemQtyMin) then

  gotoLabel(labelToGoIfNotEnoughSupplies)

end

return true


]]
gotolabel:startHunt
label:gotoCity
goto:32949,32686,6
goto:32949,32689,6
goto:32950,32695,7
goto:32956,32700,7
goto:32962,32701,7
goto:32968,32705,7
goto:32974,32707,7
goto:32974,32713,7
gotolabel:checkSupply
label:startHunt
function:[[

--check supply

-- config

local itemId = 237

local itemQtyMin = 150

local labelToGoIfNotEnoughSupplies = "gotoCity"

-- não mexer abaixo

local containers = getContainers()

local itemTotal = 0

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

if (itemTotal <= itemQtyMin) then

  gotoLabel(labelToGoIfNotEnoughSupplies)

end

return true


]]
function:[[

--check supply

-- config

local itemId = 7643

local itemQtyMin = 100

local labelToGoIfNotEnoughSupplies = "gotoCity"

-- não mexer abaixo

local containers = getContainers()

local itemTotal = 0

for _, container in pairs(getContainers()) do

  for _, item in ipairs(container:getItems()) do

    if (item:getId() == itemId) then

      itemTotal = itemTotal + item:getCount()

    end

  end

end

if (itemTotal <= itemQtyMin) then

  gotoLabel(labelToGoIfNotEnoughSupplies)

end

return true


]]
goto:32949,32687,6
goto:32943,32685,6
goto:32937,32686,6
goto:32934,32680,6
goto:32934,32674,6
goto:32940,32671,6
goto:32944,32670,6
goto:32945,32676,7
goto:32945,32682,7
goto:32939,32682,7
goto:32933,32678,7
goto:32937,32672,7
goto:32943,32673,7
goto:32949,32675,7
goto:32955,32677,7
goto:32962,32683,7
goto:32956,32685,7
goto:32952,32679,7
goto:32950,32673,7
goto:32944,32670,7
goto:32944,32670,7
goto:32948,32676,6
goto:32954,32678,6
goto:32960,32675,6
goto:32962,32681,6
goto:32965,32685,6
goto:32959,32685,5
goto:32953,32683,5
goto:32947,32685,5
goto:32952,32679,5
goto:32951,32673,5
goto:32945,32673,5
goto:32939,32672,5
goto:32945,32673,5
goto:32951,32673,5
goto:32957,32675,5
goto:32961,32681,5
goto:32965,32680,5
goto:32965,32680,4
goto:32965,32680,5
goto:32965,32680,4
goto:32965,32680,5
goto:32959,32681,4
goto:32953,32681,4
goto:32947,32682,4
goto:32941,32684,4
goto:32940,32678,4
goto:32946,32678,4
goto:32950,32673,4
goto:32948,32679,3
goto:32946,32685,3
goto:32940,32685,3
goto:32938,32679,3
goto:32944,32675,3
goto:32944,32681,3
goto:32950,32682,3
goto:32956,32682,3
goto:32962,32680,3
goto:32956,32683,3
goto:32950,32681,3
goto:32949,32675,3
goto:32950,32673,3
goto:32950,32673,4
goto:32947,32673,3
goto:32947,32673,2
goto:32950,32673,3
goto:32955,32679,4
goto:32961,32683,4
goto:32965,32680,4
goto:32965,32685,5
goto:32959,32686,6
goto:32953,32686,6
gotolabel:startHunt
config:{"useDelay":400,"mapClickDelay":100,"walkDelay":10,"ping":100,"ignoreFields":false,"skipBlocked":false,"mapClick":false}
extensions:[[
{
  "Depositer": [

  ],
  "Supply": [

  ]
}
]]
